// Paquete donde se encuentra la clase.
// "modelo" agrupa todas las clases que representan los elementos principales del sistema.
package modelo;

// ---------------------------------------------------------------
// üîπ Clase Foto (subclase de Producto)
// ---------------------------------------------------------------

// La clase Foto representa un tipo de producto espec√≠fico del sistema.
// Hereda de la clase abstracta Producto, lo que significa que debe implementar
// todos los m√©todos abstractos definidos all√≠ (print, calcularPrecio, getDescripcion).
public class Foto extends Producto {

    // ---------------------------------------------------------------
    // üîπ Atributos o propiedades
    // ---------------------------------------------------------------

    // "fichero" almacena el nombre o ruta del archivo de la foto.
    // Por ejemplo: "paisaje_colombia.jpg"
    private String fichero;

    // "camara" representa la c√°mara con la que se tom√≥ la foto.
    // Este atributo crea una relaci√≥n directa entre la clase Foto y la clase Camara.
    private Camara camara;

    // ---------------------------------------------------------------
    // üîπ Constructor
    // ---------------------------------------------------------------

    // El constructor inicializa los atributos de la clase.
    // Recibe el nombre del archivo y el objeto Camara con el que fue tomada.
    // Esto demuestra una relaci√≥n de COMPOSICI√ìN: una foto depende de una c√°mara.
    public Foto(String fichero, Camara camara) {
        this.fichero = fichero;
        this.camara = camara;
    }

    // ---------------------------------------------------------------
    // üîπ M√©todo sobrescrito print()
    // ---------------------------------------------------------------

    // Este m√©todo implementa el comportamiento definido en la clase abstracta Producto.
    // Su prop√≥sito es "imprimir" o mostrar en consola la informaci√≥n de la foto.
    // Se usa la anotaci√≥n @Override porque estamos sobrescribiendo un m√©todo abstracto.
    @Override
    public void print() {
        System.out.println("üñºÔ∏è Imprimiendo foto: " + fichero + " tomada con " + camara);
    }

    // ---------------------------------------------------------------
    // üîπ M√©todo propio editarFoto()
    // ---------------------------------------------------------------

    // Este m√©todo no proviene de la clase padre.
    // Es una funcionalidad adicional exclusiva de la clase Foto,
    // que simula la acci√≥n de editar la imagen antes de imprimirla.
    public void editarFoto() {
        System.out.println("üé® Editando foto: " + fichero);
    }

    // ---------------------------------------------------------------
    // üîπ M√©todo sobrescrito calcularPrecio()
    // ---------------------------------------------------------------

    // Implementa el m√©todo abstracto de la clase Producto.
    // Devuelve el costo fijo de imprimir una foto (en este caso, 1500.0).
    // En un caso real, este valor podr√≠a calcularse din√°micamente.
    @Override
    public double calcularPrecio() {
        return 1500.0;
    }

    // ---------------------------------------------------------------
    // üîπ M√©todo sobrescrito getDescripcion()
    // ---------------------------------------------------------------

    // Tambi√©n proviene de la clase Producto.
    // Devuelve una cadena con una descripci√≥n legible del producto (la foto).
    @Override
    public String getDescripcion() {
        return "Foto del archivo '" + fichero + "'";
    }

    // ---------------------------------------------------------------
    // üîπ M√©todo sobrescrito toString()
    // ---------------------------------------------------------------

    // Sobrescribimos el m√©todo toString() de Object para personalizar
    // c√≥mo se mostrar√° el objeto Foto si lo imprimimos directamente.
    @Override
    public String toString() {
        return "Foto{" + "fichero='" + fichero + "', camara=" + camara + '}';
    }
}

// Paquete donde est√° la clase, que agrupa las clases del modelo l√≥gico del sistema.
package modelo;

// ---------------------------------------------------------------
// üîπ Clase PedidoFactory
//El patr√≥n Factory Method permite delegar la creaci√≥n de objetos a una clase especializada (la f√°brica)
//en lugar de crear los objetos directamente con new.

//En este sistema, hay varios tipos de productos (Camara, Impresion, etc.),
//y el pedido debe poder crearlos sin saber cu√°l clase concreta usar.

 //Objetivo del patr√≥n:

//Evitar que la clase Pedido est√© llena de if o switch para crear productos.
//En su lugar, la clase f√°brica (PedidoFactory) decide qu√© tipo de producto instanciar.

// La clase PedidoFactory hereda de la clase abstracta Creator.
// Implementa el m√©todo abstracto crearProducto(), cumpliendo el patr√≥n Factory Method.
// Su funci√≥n es crear objetos del tipo correcto (Foto o Impresion) seg√∫n el tipo indicado.
public class PedidoFactory extends Creator {

    // ---------------------------------------------------------------
    // M√©todo sobrescrito crearProducto()
    // ---------------------------------------------------------------

    // Este m√©todo es el coraz√≥n del patr√≥n Factory Method.
    // Recibe dos par√°metros:
    // - tipo: indica qu√© tipo de producto se desea crear ("foto" o "impresion").
    // - parametro: informaci√≥n adicional que necesita el producto (nombre del archivo o color).
   @Override
public Producto crearProducto(String tipo, String parametro) {
    if (tipo.equalsIgnoreCase("foto")) {
        // ‚ùå Ya no se crea una c√°mara gen√©rica aqu√≠
        System.out.println("‚ö†Ô∏è Las fotos deben crearse desde la c√°mara real (no por la f√°brica).");
        return null;
    } else if (tipo.equalsIgnoreCase("impresion")) {
        // ‚úÖ La f√°brica solo se encarga de las impresiones
        return new Impresion(parametro);
    }

    System.out.println("‚ö†Ô∏è Tipo de producto desconocido: " + tipo);
    return null;
}

}
